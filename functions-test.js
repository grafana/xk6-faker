import { check, group } from "k6";
import { Faker } from "k6/x/faker";

export const options = {
  "thresholds": {
    "checks": ["rate == 1.0"]
  }
};

export default function () {
  let faker = new Faker(11);
  let checker = (v) => typeof(v) != "undefined";
  group('address', ()=> {
    check(faker.address.address(), { 'address.address()': checker });
    check(faker.address.city(), { 'address.city()': checker });
    check(faker.address.country(), { 'address.country()': checker });
    check(faker.address.countryAbbreviation(), { 'address.countryAbbreviation()': checker });
    check(faker.address.latitude(), { 'address.latitude()': checker });
    check(faker.address.latitudeRange(0,90), { 'address.latitudeRange(0,90)': checker });
    check(faker.address.longitude(), { 'address.longitude()': checker });
    check(faker.address.longitudeRange(0,180), { 'address.longitudeRange(0,180)': checker });
    check(faker.address.state(), { 'address.state()': checker });
    check(faker.address.stateAbbreviation(), { 'address.stateAbbreviation()': checker });
    check(faker.address.street(), { 'address.street()': checker });
    check(faker.address.streetName(), { 'address.streetName()': checker });
    check(faker.address.streetNumber(), { 'address.streetNumber()': checker });
    check(faker.address.streetPrefix(), { 'address.streetPrefix()': checker });
    check(faker.address.streetSuffix(), { 'address.streetSuffix()': checker });
    check(faker.address.zip(), { 'address.zip()': checker });
  });
  group('animal', ()=> {
    check(faker.animal.animal(), { 'animal.animal()': checker });
    check(faker.animal.animalType(), { 'animal.animalType()': checker });
    check(faker.animal.bird(), { 'animal.bird()': checker });
    check(faker.animal.cat(), { 'animal.cat()': checker });
    check(faker.animal.dog(), { 'animal.dog()': checker });
    check(faker.animal.farmAnimal(), { 'animal.farmAnimal()': checker });
    check(faker.animal.petName(), { 'animal.petName()': checker });
  });
  group('app', ()=> {
    check(faker.app.appAuthor(), { 'app.appAuthor()': checker });
    check(faker.app.appName(), { 'app.appName()': checker });
    check(faker.app.appVersion(), { 'app.appVersion()': checker });
  });
  group('beer', ()=> {
    check(faker.beer.beerAlcohol(), { 'beer.beerAlcohol()': checker });
    check(faker.beer.beerBlg(), { 'beer.beerBlg()': checker });
    check(faker.beer.beerHop(), { 'beer.beerHop()': checker });
    check(faker.beer.beerIbu(), { 'beer.beerIbu()': checker });
    check(faker.beer.beerMalt(), { 'beer.beerMalt()': checker });
    check(faker.beer.beerName(), { 'beer.beerName()': checker });
    check(faker.beer.beerStyle(), { 'beer.beerStyle()': checker });
    check(faker.beer.beerYeast(), { 'beer.beerYeast()': checker });
  });
  group('book', ()=> {
    check(faker.book.book(), { 'book.book()': checker });
    check(faker.book.bookAuthor(), { 'book.bookAuthor()': checker });
    check(faker.book.bookGenre(), { 'book.bookGenre()': checker });
    check(faker.book.bookTitle(), { 'book.bookTitle()': checker });
  });
  group('car', ()=> {
    check(faker.car.car(), { 'car.car()': checker });
    check(faker.car.carFuelType(), { 'car.carFuelType()': checker });
    check(faker.car.carMaker(), { 'car.carMaker()': checker });
    check(faker.car.carModel(), { 'car.carModel()': checker });
    check(faker.car.carTransmissionType(), { 'car.carTransmissionType()': checker });
    check(faker.car.carType(), { 'car.carType()': checker });
  });
  group('celebrity', ()=> {
    check(faker.celebrity.celebrityActor(), { 'celebrity.celebrityActor()': checker });
    check(faker.celebrity.celebrityBusiness(), { 'celebrity.celebrityBusiness()': checker });
    check(faker.celebrity.celebritySport(), { 'celebrity.celebritySport()': checker });
  });
  group('color', ()=> {
    check(faker.color.color(), { 'color.color()': checker });
    check(faker.color.hexColor(), { 'color.hexColor()': checker });
    check(faker.color.niceColors(), { 'color.niceColors()': checker });
    check(faker.color.rgbColor(), { 'color.rgbColor()': checker });
    check(faker.color.safeColor(), { 'color.safeColor()': checker });
  });
  group('company', ()=> {
    check(faker.company.blurb(), { 'company.blurb()': checker });
    check(faker.company.bs(), { 'company.bs()': checker });
    check(faker.company.buzzword(), { 'company.buzzword()': checker });
    check(faker.company.company(), { 'company.company()': checker });
    check(faker.company.companySuffix(), { 'company.companySuffix()': checker });
    check(faker.company.job(), { 'company.job()': checker });
    check(faker.company.jobDescriptor(), { 'company.jobDescriptor()': checker });
    check(faker.company.jobLevel(), { 'company.jobLevel()': checker });
    check(faker.company.jobTitle(), { 'company.jobTitle()': checker });
    check(faker.company.slogan(), { 'company.slogan()': checker });
  });
  group('emoji', ()=> {
    check(faker.emoji.emoji(), { 'emoji.emoji()': checker });
    check(faker.emoji.emojiAlias(), { 'emoji.emojiAlias()': checker });
    check(faker.emoji.emojiCategory(), { 'emoji.emojiCategory()': checker });
    check(faker.emoji.emojiDescription(), { 'emoji.emojiDescription()': checker });
    check(faker.emoji.emojiTag(), { 'emoji.emojiTag()': checker });
  });
  group('error', ()=> {
    check(faker.error.databaseError(), { 'error.databaseError()': checker });
    check(faker.error.error(), { 'error.error()': checker });
    check(faker.error.errorObjectWord(), { 'error.errorObjectWord()': checker });
    check(faker.error.gRPCError(), { 'error.gRPCError()': checker });
    check(faker.error.httpClientError(), { 'error.httpClientError()': checker });
    check(faker.error.httpError(), { 'error.httpError()': checker });
    check(faker.error.httpServerError(), { 'error.httpServerError()': checker });
    check(faker.error.runtimeError(), { 'error.runtimeError()': checker });
    check(faker.error.validationError(), { 'error.validationError()': checker });
  });
  group('file', ()=> {
    check(faker.file.fileExtension(), { 'file.fileExtension()': checker });
    check(faker.file.fileMimeType(), { 'file.fileMimeType()': checker });
  });
  group('finance', ()=> {
    check(faker.finance.cusip(), { 'finance.cusip()': checker });
    check(faker.finance.isin(), { 'finance.isin()': checker });
  });
  group('food', ()=> {
    check(faker.food.breakfast(), { 'food.breakfast()': checker });
    check(faker.food.dessert(), { 'food.dessert()': checker });
    check(faker.food.dinner(), { 'food.dinner()': checker });
    check(faker.food.drink(), { 'food.drink()': checker });
    check(faker.food.fruit(), { 'food.fruit()': checker });
    check(faker.food.lunch(), { 'food.lunch()': checker });
    check(faker.food.snack(), { 'food.snack()': checker });
    check(faker.food.vegetable(), { 'food.vegetable()': checker });
  });
  group('game', ()=> {
    check(faker.game.dice(1,[5,4,13]), { 'game.dice(1,[5,4,13])': checker });
    check(faker.game.gamertag(), { 'game.gamertag()': checker });
  });
  group('hacker', ()=> {
    check(faker.hacker.hackerAbbreviation(), { 'hacker.hackerAbbreviation()': checker });
    check(faker.hacker.hackerAdjective(), { 'hacker.hackerAdjective()': checker });
    check(faker.hacker.hackerNoun(), { 'hacker.hackerNoun()': checker });
    check(faker.hacker.hackerPhrase(), { 'hacker.hackerPhrase()': checker });
    check(faker.hacker.hackerVerb(), { 'hacker.hackerVerb()': checker });
    check(faker.hacker.hackeringVerb(), { 'hacker.hackeringVerb()': checker });
  });
  group('hipster', ()=> {
    check(faker.hipster.hipsterParagraph(2,2,5,"\u003cbr /\u003e"), { 'hipster.hipsterParagraph(2,2,5,"\u003cbr /\u003e")': checker });
    check(faker.hipster.hipsterSentence(5), { 'hipster.hipsterSentence(5)': checker });
    check(faker.hipster.hipsterWord(), { 'hipster.hipsterWord()': checker });
  });
  group('internet', ()=> {
    check(faker.internet.chromeUserAgent(), { 'internet.chromeUserAgent()': checker });
    check(faker.internet.domainName(), { 'internet.domainName()': checker });
    check(faker.internet.domainSuffix(), { 'internet.domainSuffix()': checker });
    check(faker.internet.firefoxUserAgent(), { 'internet.firefoxUserAgent()': checker });
    check(faker.internet.httpMethod(), { 'internet.httpMethod()': checker });
    check(faker.internet.httpStatusCode(), { 'internet.httpStatusCode()': checker });
    check(faker.internet.httpStatusCodeSimple(), { 'internet.httpStatusCodeSimple()': checker });
    check(faker.internet.httpVersion(), { 'internet.httpVersion()': checker });
    check(faker.internet.imageUrl(500,500), { 'internet.imageUrl(500,500)': checker });
    check(faker.internet.inputName(), { 'internet.inputName()': checker });
    check(faker.internet.ipv4Address(), { 'internet.ipv4Address()': checker });
    check(faker.internet.ipv6Address(), { 'internet.ipv6Address()': checker });
    check(faker.internet.logLevel(), { 'internet.logLevel()': checker });
    check(faker.internet.macAddress(), { 'internet.macAddress()': checker });
    check(faker.internet.operaUserAgent(), { 'internet.operaUserAgent()': checker });
    check(faker.internet.password(true,false,true,true,false,12), { 'internet.password(true,false,true,true,false,12)': checker });
    check(faker.internet.safariUserAgent(), { 'internet.safariUserAgent()': checker });
    check(faker.internet.url(), { 'internet.url()': checker });
    check(faker.internet.userAgent(), { 'internet.userAgent()': checker });
    check(faker.internet.username(), { 'internet.username()': checker });
  });
  group('language', ()=> {
    check(faker.language.language(), { 'language.language()': checker });
    check(faker.language.languageAbbreviation(), { 'language.languageAbbreviation()': checker });
    check(faker.language.languageBcp(), { 'language.languageBcp()': checker });
    check(faker.language.programmingLanguage(), { 'language.programmingLanguage()': checker });
  });
  group('minecraft', ()=> {
    check(faker.minecraft.minecraftAnimal(), { 'minecraft.minecraftAnimal()': checker });
    check(faker.minecraft.minecraftArmorPart(), { 'minecraft.minecraftArmorPart()': checker });
    check(faker.minecraft.minecraftArmorTier(), { 'minecraft.minecraftArmorTier()': checker });
    check(faker.minecraft.minecraftBiome(), { 'minecraft.minecraftBiome()': checker });
    check(faker.minecraft.minecraftDye(), { 'minecraft.minecraftDye()': checker });
    check(faker.minecraft.minecraftFood(), { 'minecraft.minecraftFood()': checker });
    check(faker.minecraft.minecraftMobBoss(), { 'minecraft.minecraftMobBoss()': checker });
    check(faker.minecraft.minecraftMobHostile(), { 'minecraft.minecraftMobHostile()': checker });
    check(faker.minecraft.minecraftMobNeutral(), { 'minecraft.minecraftMobNeutral()': checker });
    check(faker.minecraft.minecraftMobPassive(), { 'minecraft.minecraftMobPassive()': checker });
    check(faker.minecraft.minecraftOre(), { 'minecraft.minecraftOre()': checker });
    check(faker.minecraft.minecraftTool(), { 'minecraft.minecraftTool()': checker });
    check(faker.minecraft.minecraftVillagerJob(), { 'minecraft.minecraftVillagerJob()': checker });
    check(faker.minecraft.minecraftVillagerLevel(), { 'minecraft.minecraftVillagerLevel()': checker });
    check(faker.minecraft.minecraftVillagerStation(), { 'minecraft.minecraftVillagerStation()': checker });
    check(faker.minecraft.minecraftWeapon(), { 'minecraft.minecraftWeapon()': checker });
    check(faker.minecraft.minecraftWeather(), { 'minecraft.minecraftWeather()': checker });
    check(faker.minecraft.minecraftWood(), { 'minecraft.minecraftWood()': checker });
  });
  group('movie', ()=> {
    check(faker.movie.movie(), { 'movie.movie()': checker });
    check(faker.movie.movieGenre(), { 'movie.movieGenre()': checker });
    check(faker.movie.movieName(), { 'movie.movieName()': checker });
  });
  group('numbers', ()=> {
    check(faker.numbers.boolean(), { 'numbers.boolean()': checker });
    check(faker.numbers.float32(), { 'numbers.float32()': checker });
    check(faker.numbers.float32Range(3,5), { 'numbers.float32Range(3,5)': checker });
    check(faker.numbers.float64(), { 'numbers.float64()': checker });
    check(faker.numbers.float64Range(3,5), { 'numbers.float64Range(3,5)': checker });
    check(faker.numbers.hexUint128(), { 'numbers.hexUint128()': checker });
    check(faker.numbers.hexUint16(), { 'numbers.hexUint16()': checker });
    check(faker.numbers.hexUint256(), { 'numbers.hexUint256()': checker });
    check(faker.numbers.hexUint32(), { 'numbers.hexUint32()': checker });
    check(faker.numbers.hexUint64(), { 'numbers.hexUint64()': checker });
    check(faker.numbers.hexUint8(), { 'numbers.hexUint8()': checker });
    check(faker.numbers.int16(), { 'numbers.int16()': checker });
    check(faker.numbers.int32(), { 'numbers.int32()': checker });
    check(faker.numbers.int64(), { 'numbers.int64()': checker });
    check(faker.numbers.int8(), { 'numbers.int8()': checker });
    check(faker.numbers.intRange(3,5), { 'numbers.intRange(3,5)': checker });
    check(faker.numbers.number(-2147483648,2147483647), { 'numbers.number(-2147483648,2147483647)': checker });
    check(faker.numbers.randomInt([14,8,13]), { 'numbers.randomInt([14,8,13])': checker });
    check(faker.numbers.randomUint([14,8,13]), { 'numbers.randomUint([14,8,13])': checker });
    check(faker.numbers.shuffleInts([14,8,13]), { 'numbers.shuffleInts([14,8,13])': checker });
    check(faker.numbers.uint16(), { 'numbers.uint16()': checker });
    check(faker.numbers.uint32(), { 'numbers.uint32()': checker });
    check(faker.numbers.uint64(), { 'numbers.uint64()': checker });
    check(faker.numbers.uint8(), { 'numbers.uint8()': checker });
    check(faker.numbers.uintRange(0,4294967295), { 'numbers.uintRange(0,4294967295)': checker });
  });
  group('payment', ()=> {
    check(faker.payment.achAccountNumber(), { 'payment.achAccountNumber()': checker });
    check(faker.payment.achRoutingNumber(), { 'payment.achRoutingNumber()': checker });
    check(faker.payment.bitcoinAddress(), { 'payment.bitcoinAddress()': checker });
    check(faker.payment.bitcoinPrivateKey(), { 'payment.bitcoinPrivateKey()': checker });
    check(faker.payment.creditCard(), { 'payment.creditCard()': checker });
    check(faker.payment.creditCardCVV(), { 'payment.creditCardCVV()': checker });
    check(faker.payment.creditCardExp(), { 'payment.creditCardExp()': checker });
    check(faker.payment.creditCardExpMonth(), { 'payment.creditCardExpMonth()': checker });
    check(faker.payment.creditCardExpYear(), { 'payment.creditCardExpYear()': checker });
    check(faker.payment.creditCardNumberFormatted(), { 'payment.creditCardNumberFormatted()': checker });
    check(faker.payment.creditCardType(), { 'payment.creditCardType()': checker });
    check(faker.payment.currency(), { 'payment.currency()': checker });
    check(faker.payment.currencyLong(), { 'payment.currencyLong()': checker });
    check(faker.payment.currencyShort(), { 'payment.currencyShort()': checker });
    check(faker.payment.price(0,1000), { 'payment.price(0,1000)': checker });
  });
  group('person', ()=> {
    check(faker.person.email(), { 'person.email()': checker });
    check(faker.person.firstName(), { 'person.firstName()': checker });
    check(faker.person.gender(), { 'person.gender()': checker });
    check(faker.person.hobby(), { 'person.hobby()': checker });
    check(faker.person.lastName(), { 'person.lastName()': checker });
    check(faker.person.middleName(), { 'person.middleName()': checker });
    check(faker.person.name(), { 'person.name()': checker });
    check(faker.person.namePrefix(), { 'person.namePrefix()': checker });
    check(faker.person.nameSuffix(), { 'person.nameSuffix()': checker });
    check(faker.person.person(), { 'person.person()': checker });
    check(faker.person.phone(), { 'person.phone()': checker });
    check(faker.person.phoneFormatted(), { 'person.phoneFormatted()': checker });
    check(faker.person.school(), { 'person.school()': checker });
    check(faker.person.ssn(), { 'person.ssn()': checker });
    check(faker.person.teams(["none","how","these","keep","trip","congolese","choir","computer","still","far"],["unless","army","party","riches","theirs","instead","here","mine","whichever","that"]), { 'person.teams(["none","how","these","keep","trip","congolese","choir","computer","still","far"],["unless","army","party","riches","theirs","instead","here","mine","whichever","that"])': checker });
  });
  group('product', ()=> {
    check(faker.product.product(), { 'product.product()': checker });
    check(faker.product.productCategory(), { 'product.productCategory()': checker });
    check(faker.product.productDescription(), { 'product.productDescription()': checker });
    check(faker.product.productFeature(), { 'product.productFeature()': checker });
    check(faker.product.productMaterial(), { 'product.productMaterial()': checker });
    check(faker.product.productName(), { 'product.productName()': checker });
    check(faker.product.productUpc(), { 'product.productUpc()': checker });
  });
  group('strings', ()=> {
    check(faker.strings.digit(), { 'strings.digit()': checker });
    check(faker.strings.digitN(3), { 'strings.digitN(3)': checker });
    check(faker.strings.letter(), { 'strings.letter()': checker });
    check(faker.strings.letterN(3), { 'strings.letterN(3)': checker });
    check(faker.strings.lexify("none"), { 'strings.lexify("none")': checker });
    check(faker.strings.numerify("none"), { 'strings.numerify("none")': checker });
    check(faker.strings.randomString(["none","how","these","keep","trip","congolese","choir","computer","still","far"]), { 'strings.randomString(["none","how","these","keep","trip","congolese","choir","computer","still","far"])': checker });
    check(faker.strings.shuffleStrings(["none","how","these","keep","trip","congolese","choir","computer","still","far"]), { 'strings.shuffleStrings(["none","how","these","keep","trip","congolese","choir","computer","still","far"])': checker });
    check(faker.strings.uuid(), { 'strings.uuid()': checker });
  });
  group('time', ()=> {
    check(faker.time.date("RFC3339"), { 'time.date("RFC3339")': checker });
    check(faker.time.dateRange("1970-01-01","2024-03-13","yyyy-MM-dd"), { 'time.dateRange("1970-01-01","2024-03-13","yyyy-MM-dd")': checker });
    check(faker.time.day(), { 'time.day()': checker });
    check(faker.time.futureTime(), { 'time.futureTime()': checker });
    check(faker.time.hour(), { 'time.hour()': checker });
    check(faker.time.minute(), { 'time.minute()': checker });
    check(faker.time.month(), { 'time.month()': checker });
    check(faker.time.monthString(), { 'time.monthString()': checker });
    check(faker.time.nanosecond(), { 'time.nanosecond()': checker });
    check(faker.time.pastTime(), { 'time.pastTime()': checker });
    check(faker.time.second(), { 'time.second()': checker });
    check(faker.time.timezone(), { 'time.timezone()': checker });
    check(faker.time.timezoneAbbreviation(), { 'time.timezoneAbbreviation()': checker });
    check(faker.time.timezoneFull(), { 'time.timezoneFull()': checker });
    check(faker.time.timezoneOffset(), { 'time.timezoneOffset()': checker });
    check(faker.time.timezoneRegion(), { 'time.timezoneRegion()': checker });
    check(faker.time.weekday(), { 'time.weekday()': checker });
    check(faker.time.year(), { 'time.year()': checker });
  });
  group('word', ()=> {
    check(faker.word.actionVerb(), { 'word.actionVerb()': checker });
    check(faker.word.adjective(), { 'word.adjective()': checker });
    check(faker.word.adverb(), { 'word.adverb()': checker });
    check(faker.word.adverbDegree(), { 'word.adverbDegree()': checker });
    check(faker.word.adverbFrequencyDefinite(), { 'word.adverbFrequencyDefinite()': checker });
    check(faker.word.adverbFrequencyIndefinite(), { 'word.adverbFrequencyIndefinite()': checker });
    check(faker.word.adverbManner(), { 'word.adverbManner()': checker });
    check(faker.word.adverbPhrase(), { 'word.adverbPhrase()': checker });
    check(faker.word.adverbPlace(), { 'word.adverbPlace()': checker });
    check(faker.word.adverbTimeDefinite(), { 'word.adverbTimeDefinite()': checker });
    check(faker.word.adverbTimeIndefinite(), { 'word.adverbTimeIndefinite()': checker });
    check(faker.word.comment(), { 'word.comment()': checker });
    check(faker.word.connective(), { 'word.connective()': checker });
    check(faker.word.connectiveCasual(), { 'word.connectiveCasual()': checker });
    check(faker.word.connectiveComparitive(), { 'word.connectiveComparitive()': checker });
    check(faker.word.connectiveComplaint(), { 'word.connectiveComplaint()': checker });
    check(faker.word.connectiveExamplify(), { 'word.connectiveExamplify()': checker });
    check(faker.word.connectiveListing(), { 'word.connectiveListing()': checker });
    check(faker.word.connectiveTime(), { 'word.connectiveTime()': checker });
    check(faker.word.demonstrativeAdjective(), { 'word.demonstrativeAdjective()': checker });
    check(faker.word.descriptiveAdjective(), { 'word.descriptiveAdjective()': checker });
    check(faker.word.helpingVerb(), { 'word.helpingVerb()': checker });
    check(faker.word.indefiniteAdjective(), { 'word.indefiniteAdjective()': checker });
    check(faker.word.interjection(), { 'word.interjection()': checker });
    check(faker.word.interrogativeAdjective(), { 'word.interrogativeAdjective()': checker });
    check(faker.word.intransitiveVerb(), { 'word.intransitiveVerb()': checker });
    check(faker.word.linkingVerb(), { 'word.linkingVerb()': checker });
    check(faker.word.loremIpsumParagraph(2,2,5,"\u003cbr /\u003e"), { 'word.loremIpsumParagraph(2,2,5,"\u003cbr /\u003e")': checker });
    check(faker.word.loremIpsumSentence(5), { 'word.loremIpsumSentence(5)': checker });
    check(faker.word.loremIpsumWord(), { 'word.loremIpsumWord()': checker });
    check(faker.word.noun(), { 'word.noun()': checker });
    check(faker.word.nounAbstract(), { 'word.nounAbstract()': checker });
    check(faker.word.nounCollectiveAnimal(), { 'word.nounCollectiveAnimal()': checker });
    check(faker.word.nounCollectivePeople(), { 'word.nounCollectivePeople()': checker });
    check(faker.word.nounCollectiveThing(), { 'word.nounCollectiveThing()': checker });
    check(faker.word.nounCommon(), { 'word.nounCommon()': checker });
    check(faker.word.nounConcrete(), { 'word.nounConcrete()': checker });
    check(faker.word.nounCountable(), { 'word.nounCountable()': checker });
    check(faker.word.nounDeterminer(), { 'word.nounDeterminer()': checker });
    check(faker.word.nounPhrase(), { 'word.nounPhrase()': checker });
    check(faker.word.nounProper(), { 'word.nounProper()': checker });
    check(faker.word.nounUncountable(), { 'word.nounUncountable()': checker });
    check(faker.word.paragraph(2,2,5,"\u003cbr /\u003e"), { 'word.paragraph(2,2,5,"\u003cbr /\u003e")': checker });
    check(faker.word.phrase(), { 'word.phrase()': checker });
    check(faker.word.possessiveAdjective(), { 'word.possessiveAdjective()': checker });
    check(faker.word.preposition(), { 'word.preposition()': checker });
    check(faker.word.prepositionCompound(), { 'word.prepositionCompound()': checker });
    check(faker.word.prepositionDouble(), { 'word.prepositionDouble()': checker });
    check(faker.word.prepositionPhrase(), { 'word.prepositionPhrase()': checker });
    check(faker.word.prepositionSimple(), { 'word.prepositionSimple()': checker });
    check(faker.word.pronoun(), { 'word.pronoun()': checker });
    check(faker.word.pronounDemonstrative(), { 'word.pronounDemonstrative()': checker });
    check(faker.word.pronounIndefinite(), { 'word.pronounIndefinite()': checker });
    check(faker.word.pronounInterrogative(), { 'word.pronounInterrogative()': checker });
    check(faker.word.pronounObject(), { 'word.pronounObject()': checker });
    check(faker.word.pronounPersonal(), { 'word.pronounPersonal()': checker });
    check(faker.word.pronounPossessive(), { 'word.pronounPossessive()': checker });
    check(faker.word.pronounReflective(), { 'word.pronounReflective()': checker });
    check(faker.word.pronounRelative(), { 'word.pronounRelative()': checker });
    check(faker.word.properAdjective(), { 'word.properAdjective()': checker });
    check(faker.word.quantitativeAdjective(), { 'word.quantitativeAdjective()': checker });
    check(faker.word.question(), { 'word.question()': checker });
    check(faker.word.quote(), { 'word.quote()': checker });
    check(faker.word.sentence(5), { 'word.sentence(5)': checker });
    check(faker.word.simpleSentence(), { 'word.simpleSentence()': checker });
    check(faker.word.transitiveVerb(), { 'word.transitiveVerb()': checker });
    check(faker.word.verb(), { 'word.verb()': checker });
    check(faker.word.verbPhrase(), { 'word.verbPhrase()': checker });
    check(faker.word.word(), { 'word.word()': checker });
  });
  group('zen', ()=> {
    check(faker.zen.achAccountNumber(), { 'zen.achAccountNumber()': checker });
    check(faker.call("achAccountNumber"), { 'call("achAccountNumber")': checker });
    check(faker.zen.achRoutingNumber(), { 'zen.achRoutingNumber()': checker });
    check(faker.call("achRoutingNumber"), { 'call("achRoutingNumber")': checker });
    check(faker.zen.actionVerb(), { 'zen.actionVerb()': checker });
    check(faker.call("actionVerb"), { 'call("actionVerb")': checker });
    check(faker.zen.address(), { 'zen.address()': checker });
    check(faker.call("address"), { 'call("address")': checker });
    check(faker.zen.adjective(), { 'zen.adjective()': checker });
    check(faker.call("adjective"), { 'call("adjective")': checker });
    check(faker.zen.adverb(), { 'zen.adverb()': checker });
    check(faker.call("adverb"), { 'call("adverb")': checker });
    check(faker.zen.adverbDegree(), { 'zen.adverbDegree()': checker });
    check(faker.call("adverbDegree"), { 'call("adverbDegree")': checker });
    check(faker.zen.adverbFrequencyDefinite(), { 'zen.adverbFrequencyDefinite()': checker });
    check(faker.call("adverbFrequencyDefinite"), { 'call("adverbFrequencyDefinite")': checker });
    check(faker.zen.adverbFrequencyIndefinite(), { 'zen.adverbFrequencyIndefinite()': checker });
    check(faker.call("adverbFrequencyIndefinite"), { 'call("adverbFrequencyIndefinite")': checker });
    check(faker.zen.adverbManner(), { 'zen.adverbManner()': checker });
    check(faker.call("adverbManner"), { 'call("adverbManner")': checker });
    check(faker.zen.adverbPhrase(), { 'zen.adverbPhrase()': checker });
    check(faker.call("adverbPhrase"), { 'call("adverbPhrase")': checker });
    check(faker.zen.adverbPlace(), { 'zen.adverbPlace()': checker });
    check(faker.call("adverbPlace"), { 'call("adverbPlace")': checker });
    check(faker.zen.adverbTimeDefinite(), { 'zen.adverbTimeDefinite()': checker });
    check(faker.call("adverbTimeDefinite"), { 'call("adverbTimeDefinite")': checker });
    check(faker.zen.adverbTimeIndefinite(), { 'zen.adverbTimeIndefinite()': checker });
    check(faker.call("adverbTimeIndefinite"), { 'call("adverbTimeIndefinite")': checker });
    check(faker.zen.animal(), { 'zen.animal()': checker });
    check(faker.call("animal"), { 'call("animal")': checker });
    check(faker.zen.animalType(), { 'zen.animalType()': checker });
    check(faker.call("animalType"), { 'call("animalType")': checker });
    check(faker.zen.appAuthor(), { 'zen.appAuthor()': checker });
    check(faker.call("appAuthor"), { 'call("appAuthor")': checker });
    check(faker.zen.appName(), { 'zen.appName()': checker });
    check(faker.call("appName"), { 'call("appName")': checker });
    check(faker.zen.appVersion(), { 'zen.appVersion()': checker });
    check(faker.call("appVersion"), { 'call("appVersion")': checker });
    check(faker.zen.beerAlcohol(), { 'zen.beerAlcohol()': checker });
    check(faker.call("beerAlcohol"), { 'call("beerAlcohol")': checker });
    check(faker.zen.beerBlg(), { 'zen.beerBlg()': checker });
    check(faker.call("beerBlg"), { 'call("beerBlg")': checker });
    check(faker.zen.beerHop(), { 'zen.beerHop()': checker });
    check(faker.call("beerHop"), { 'call("beerHop")': checker });
    check(faker.zen.beerIbu(), { 'zen.beerIbu()': checker });
    check(faker.call("beerIbu"), { 'call("beerIbu")': checker });
    check(faker.zen.beerMalt(), { 'zen.beerMalt()': checker });
    check(faker.call("beerMalt"), { 'call("beerMalt")': checker });
    check(faker.zen.beerName(), { 'zen.beerName()': checker });
    check(faker.call("beerName"), { 'call("beerName")': checker });
    check(faker.zen.beerStyle(), { 'zen.beerStyle()': checker });
    check(faker.call("beerStyle"), { 'call("beerStyle")': checker });
    check(faker.zen.beerYeast(), { 'zen.beerYeast()': checker });
    check(faker.call("beerYeast"), { 'call("beerYeast")': checker });
    check(faker.zen.bird(), { 'zen.bird()': checker });
    check(faker.call("bird"), { 'call("bird")': checker });
    check(faker.zen.bitcoinAddress(), { 'zen.bitcoinAddress()': checker });
    check(faker.call("bitcoinAddress"), { 'call("bitcoinAddress")': checker });
    check(faker.zen.bitcoinPrivateKey(), { 'zen.bitcoinPrivateKey()': checker });
    check(faker.call("bitcoinPrivateKey"), { 'call("bitcoinPrivateKey")': checker });
    check(faker.zen.blurb(), { 'zen.blurb()': checker });
    check(faker.call("blurb"), { 'call("blurb")': checker });
    check(faker.zen.book(), { 'zen.book()': checker });
    check(faker.call("book"), { 'call("book")': checker });
    check(faker.zen.bookAuthor(), { 'zen.bookAuthor()': checker });
    check(faker.call("bookAuthor"), { 'call("bookAuthor")': checker });
    check(faker.zen.bookGenre(), { 'zen.bookGenre()': checker });
    check(faker.call("bookGenre"), { 'call("bookGenre")': checker });
    check(faker.zen.bookTitle(), { 'zen.bookTitle()': checker });
    check(faker.call("bookTitle"), { 'call("bookTitle")': checker });
    check(faker.zen.boolean(), { 'zen.boolean()': checker });
    check(faker.call("boolean"), { 'call("boolean")': checker });
    check(faker.zen.breakfast(), { 'zen.breakfast()': checker });
    check(faker.call("breakfast"), { 'call("breakfast")': checker });
    check(faker.zen.bs(), { 'zen.bs()': checker });
    check(faker.call("bs"), { 'call("bs")': checker });
    check(faker.zen.buzzword(), { 'zen.buzzword()': checker });
    check(faker.call("buzzword"), { 'call("buzzword")': checker });
    check(faker.zen.car(), { 'zen.car()': checker });
    check(faker.call("car"), { 'call("car")': checker });
    check(faker.zen.carFuelType(), { 'zen.carFuelType()': checker });
    check(faker.call("carFuelType"), { 'call("carFuelType")': checker });
    check(faker.zen.carMaker(), { 'zen.carMaker()': checker });
    check(faker.call("carMaker"), { 'call("carMaker")': checker });
    check(faker.zen.carModel(), { 'zen.carModel()': checker });
    check(faker.call("carModel"), { 'call("carModel")': checker });
    check(faker.zen.carTransmissionType(), { 'zen.carTransmissionType()': checker });
    check(faker.call("carTransmissionType"), { 'call("carTransmissionType")': checker });
    check(faker.zen.carType(), { 'zen.carType()': checker });
    check(faker.call("carType"), { 'call("carType")': checker });
    check(faker.zen.cat(), { 'zen.cat()': checker });
    check(faker.call("cat"), { 'call("cat")': checker });
    check(faker.zen.celebrityActor(), { 'zen.celebrityActor()': checker });
    check(faker.call("celebrityActor"), { 'call("celebrityActor")': checker });
    check(faker.zen.celebrityBusiness(), { 'zen.celebrityBusiness()': checker });
    check(faker.call("celebrityBusiness"), { 'call("celebrityBusiness")': checker });
    check(faker.zen.celebritySport(), { 'zen.celebritySport()': checker });
    check(faker.call("celebritySport"), { 'call("celebritySport")': checker });
    check(faker.zen.chromeUserAgent(), { 'zen.chromeUserAgent()': checker });
    check(faker.call("chromeUserAgent"), { 'call("chromeUserAgent")': checker });
    check(faker.zen.city(), { 'zen.city()': checker });
    check(faker.call("city"), { 'call("city")': checker });
    check(faker.zen.color(), { 'zen.color()': checker });
    check(faker.call("color"), { 'call("color")': checker });
    check(faker.zen.comment(), { 'zen.comment()': checker });
    check(faker.call("comment"), { 'call("comment")': checker });
    check(faker.zen.company(), { 'zen.company()': checker });
    check(faker.call("company"), { 'call("company")': checker });
    check(faker.zen.companySuffix(), { 'zen.companySuffix()': checker });
    check(faker.call("companySuffix"), { 'call("companySuffix")': checker });
    check(faker.zen.connective(), { 'zen.connective()': checker });
    check(faker.call("connective"), { 'call("connective")': checker });
    check(faker.zen.connectiveCasual(), { 'zen.connectiveCasual()': checker });
    check(faker.call("connectiveCasual"), { 'call("connectiveCasual")': checker });
    check(faker.zen.connectiveComparitive(), { 'zen.connectiveComparitive()': checker });
    check(faker.call("connectiveComparitive"), { 'call("connectiveComparitive")': checker });
    check(faker.zen.connectiveComplaint(), { 'zen.connectiveComplaint()': checker });
    check(faker.call("connectiveComplaint"), { 'call("connectiveComplaint")': checker });
    check(faker.zen.connectiveExamplify(), { 'zen.connectiveExamplify()': checker });
    check(faker.call("connectiveExamplify"), { 'call("connectiveExamplify")': checker });
    check(faker.zen.connectiveListing(), { 'zen.connectiveListing()': checker });
    check(faker.call("connectiveListing"), { 'call("connectiveListing")': checker });
    check(faker.zen.connectiveTime(), { 'zen.connectiveTime()': checker });
    check(faker.call("connectiveTime"), { 'call("connectiveTime")': checker });
    check(faker.zen.country(), { 'zen.country()': checker });
    check(faker.call("country"), { 'call("country")': checker });
    check(faker.zen.countryAbbreviation(), { 'zen.countryAbbreviation()': checker });
    check(faker.call("countryAbbreviation"), { 'call("countryAbbreviation")': checker });
    check(faker.zen.creditCard(), { 'zen.creditCard()': checker });
    check(faker.call("creditCard"), { 'call("creditCard")': checker });
    check(faker.zen.creditCardCVV(), { 'zen.creditCardCVV()': checker });
    check(faker.call("creditCardCVV"), { 'call("creditCardCVV")': checker });
    check(faker.zen.creditCardExp(), { 'zen.creditCardExp()': checker });
    check(faker.call("creditCardExp"), { 'call("creditCardExp")': checker });
    check(faker.zen.creditCardExpMonth(), { 'zen.creditCardExpMonth()': checker });
    check(faker.call("creditCardExpMonth"), { 'call("creditCardExpMonth")': checker });
    check(faker.zen.creditCardExpYear(), { 'zen.creditCardExpYear()': checker });
    check(faker.call("creditCardExpYear"), { 'call("creditCardExpYear")': checker });
    check(faker.zen.creditCardNumberFormatted(), { 'zen.creditCardNumberFormatted()': checker });
    check(faker.call("creditCardNumberFormatted"), { 'call("creditCardNumberFormatted")': checker });
    check(faker.zen.creditCardType(), { 'zen.creditCardType()': checker });
    check(faker.call("creditCardType"), { 'call("creditCardType")': checker });
    check(faker.zen.currency(), { 'zen.currency()': checker });
    check(faker.call("currency"), { 'call("currency")': checker });
    check(faker.zen.currencyLong(), { 'zen.currencyLong()': checker });
    check(faker.call("currencyLong"), { 'call("currencyLong")': checker });
    check(faker.zen.currencyShort(), { 'zen.currencyShort()': checker });
    check(faker.call("currencyShort"), { 'call("currencyShort")': checker });
    check(faker.zen.cusip(), { 'zen.cusip()': checker });
    check(faker.call("cusip"), { 'call("cusip")': checker });
    check(faker.zen.databaseError(), { 'zen.databaseError()': checker });
    check(faker.call("databaseError"), { 'call("databaseError")': checker });
    check(faker.zen.date("RFC3339"), { 'zen.date("RFC3339")': checker });
    check(faker.call("date","RFC3339"), { 'call("date","RFC3339")': checker });
    check(faker.zen.dateRange("1970-01-01","2024-03-13","yyyy-MM-dd"), { 'zen.dateRange("1970-01-01","2024-03-13","yyyy-MM-dd")': checker });
    check(faker.call("dateRange","1970-01-01","2024-03-13","yyyy-MM-dd"), { 'call("dateRange","1970-01-01","2024-03-13","yyyy-MM-dd")': checker });
    check(faker.zen.day(), { 'zen.day()': checker });
    check(faker.call("day"), { 'call("day")': checker });
    check(faker.zen.demonstrativeAdjective(), { 'zen.demonstrativeAdjective()': checker });
    check(faker.call("demonstrativeAdjective"), { 'call("demonstrativeAdjective")': checker });
    check(faker.zen.descriptiveAdjective(), { 'zen.descriptiveAdjective()': checker });
    check(faker.call("descriptiveAdjective"), { 'call("descriptiveAdjective")': checker });
    check(faker.zen.dessert(), { 'zen.dessert()': checker });
    check(faker.call("dessert"), { 'call("dessert")': checker });
    check(faker.zen.dice(1,[5,4,13]), { 'zen.dice(1,[5,4,13])': checker });
    check(faker.call("dice",1,[5,4,13]), { 'call("dice",1,[5,4,13])': checker });
    check(faker.zen.digit(), { 'zen.digit()': checker });
    check(faker.call("digit"), { 'call("digit")': checker });
    check(faker.zen.digitN(3), { 'zen.digitN(3)': checker });
    check(faker.call("digitN",3), { 'call("digitN",3)': checker });
    check(faker.zen.dinner(), { 'zen.dinner()': checker });
    check(faker.call("dinner"), { 'call("dinner")': checker });
    check(faker.zen.dog(), { 'zen.dog()': checker });
    check(faker.call("dog"), { 'call("dog")': checker });
    check(faker.zen.domainName(), { 'zen.domainName()': checker });
    check(faker.call("domainName"), { 'call("domainName")': checker });
    check(faker.zen.domainSuffix(), { 'zen.domainSuffix()': checker });
    check(faker.call("domainSuffix"), { 'call("domainSuffix")': checker });
    check(faker.zen.drink(), { 'zen.drink()': checker });
    check(faker.call("drink"), { 'call("drink")': checker });
    check(faker.zen.email(), { 'zen.email()': checker });
    check(faker.call("email"), { 'call("email")': checker });
    check(faker.zen.emoji(), { 'zen.emoji()': checker });
    check(faker.call("emoji"), { 'call("emoji")': checker });
    check(faker.zen.emojiAlias(), { 'zen.emojiAlias()': checker });
    check(faker.call("emojiAlias"), { 'call("emojiAlias")': checker });
    check(faker.zen.emojiCategory(), { 'zen.emojiCategory()': checker });
    check(faker.call("emojiCategory"), { 'call("emojiCategory")': checker });
    check(faker.zen.emojiDescription(), { 'zen.emojiDescription()': checker });
    check(faker.call("emojiDescription"), { 'call("emojiDescription")': checker });
    check(faker.zen.emojiTag(), { 'zen.emojiTag()': checker });
    check(faker.call("emojiTag"), { 'call("emojiTag")': checker });
    check(faker.zen.error(), { 'zen.error()': checker });
    check(faker.call("error"), { 'call("error")': checker });
    check(faker.zen.errorObjectWord(), { 'zen.errorObjectWord()': checker });
    check(faker.call("errorObjectWord"), { 'call("errorObjectWord")': checker });
    check(faker.zen.farmAnimal(), { 'zen.farmAnimal()': checker });
    check(faker.call("farmAnimal"), { 'call("farmAnimal")': checker });
    check(faker.zen.fileExtension(), { 'zen.fileExtension()': checker });
    check(faker.call("fileExtension"), { 'call("fileExtension")': checker });
    check(faker.zen.fileMimeType(), { 'zen.fileMimeType()': checker });
    check(faker.call("fileMimeType"), { 'call("fileMimeType")': checker });
    check(faker.zen.firefoxUserAgent(), { 'zen.firefoxUserAgent()': checker });
    check(faker.call("firefoxUserAgent"), { 'call("firefoxUserAgent")': checker });
    check(faker.zen.firstName(), { 'zen.firstName()': checker });
    check(faker.call("firstName"), { 'call("firstName")': checker });
    check(faker.zen.float32(), { 'zen.float32()': checker });
    check(faker.call("float32"), { 'call("float32")': checker });
    check(faker.zen.float32Range(3,5), { 'zen.float32Range(3,5)': checker });
    check(faker.call("float32Range",3,5), { 'call("float32Range",3,5)': checker });
    check(faker.zen.float64(), { 'zen.float64()': checker });
    check(faker.call("float64"), { 'call("float64")': checker });
    check(faker.zen.float64Range(3,5), { 'zen.float64Range(3,5)': checker });
    check(faker.call("float64Range",3,5), { 'call("float64Range",3,5)': checker });
    check(faker.zen.fruit(), { 'zen.fruit()': checker });
    check(faker.call("fruit"), { 'call("fruit")': checker });
    check(faker.zen.futureTime(), { 'zen.futureTime()': checker });
    check(faker.call("futureTime"), { 'call("futureTime")': checker });
    check(faker.zen.gRPCError(), { 'zen.gRPCError()': checker });
    check(faker.call("gRPCError"), { 'call("gRPCError")': checker });
    check(faker.zen.gamertag(), { 'zen.gamertag()': checker });
    check(faker.call("gamertag"), { 'call("gamertag")': checker });
    check(faker.zen.gender(), { 'zen.gender()': checker });
    check(faker.call("gender"), { 'call("gender")': checker });
    check(faker.zen.hackerAbbreviation(), { 'zen.hackerAbbreviation()': checker });
    check(faker.call("hackerAbbreviation"), { 'call("hackerAbbreviation")': checker });
    check(faker.zen.hackerAdjective(), { 'zen.hackerAdjective()': checker });
    check(faker.call("hackerAdjective"), { 'call("hackerAdjective")': checker });
    check(faker.zen.hackerNoun(), { 'zen.hackerNoun()': checker });
    check(faker.call("hackerNoun"), { 'call("hackerNoun")': checker });
    check(faker.zen.hackerPhrase(), { 'zen.hackerPhrase()': checker });
    check(faker.call("hackerPhrase"), { 'call("hackerPhrase")': checker });
    check(faker.zen.hackerVerb(), { 'zen.hackerVerb()': checker });
    check(faker.call("hackerVerb"), { 'call("hackerVerb")': checker });
    check(faker.zen.hackeringVerb(), { 'zen.hackeringVerb()': checker });
    check(faker.call("hackeringVerb"), { 'call("hackeringVerb")': checker });
    check(faker.zen.helpingVerb(), { 'zen.helpingVerb()': checker });
    check(faker.call("helpingVerb"), { 'call("helpingVerb")': checker });
    check(faker.zen.hexColor(), { 'zen.hexColor()': checker });
    check(faker.call("hexColor"), { 'call("hexColor")': checker });
    check(faker.zen.hexUint128(), { 'zen.hexUint128()': checker });
    check(faker.call("hexUint128"), { 'call("hexUint128")': checker });
    check(faker.zen.hexUint16(), { 'zen.hexUint16()': checker });
    check(faker.call("hexUint16"), { 'call("hexUint16")': checker });
    check(faker.zen.hexUint256(), { 'zen.hexUint256()': checker });
    check(faker.call("hexUint256"), { 'call("hexUint256")': checker });
    check(faker.zen.hexUint32(), { 'zen.hexUint32()': checker });
    check(faker.call("hexUint32"), { 'call("hexUint32")': checker });
    check(faker.zen.hexUint64(), { 'zen.hexUint64()': checker });
    check(faker.call("hexUint64"), { 'call("hexUint64")': checker });
    check(faker.zen.hexUint8(), { 'zen.hexUint8()': checker });
    check(faker.call("hexUint8"), { 'call("hexUint8")': checker });
    check(faker.zen.hipsterParagraph(2,2,5,"\u003cbr /\u003e"), { 'zen.hipsterParagraph(2,2,5,"\u003cbr /\u003e")': checker });
    check(faker.call("hipsterParagraph",2,2,5,"\u003cbr /\u003e"), { 'call("hipsterParagraph",2,2,5,"\u003cbr /\u003e")': checker });
    check(faker.zen.hipsterSentence(5), { 'zen.hipsterSentence(5)': checker });
    check(faker.call("hipsterSentence",5), { 'call("hipsterSentence",5)': checker });
    check(faker.zen.hipsterWord(), { 'zen.hipsterWord()': checker });
    check(faker.call("hipsterWord"), { 'call("hipsterWord")': checker });
    check(faker.zen.hobby(), { 'zen.hobby()': checker });
    check(faker.call("hobby"), { 'call("hobby")': checker });
    check(faker.zen.hour(), { 'zen.hour()': checker });
    check(faker.call("hour"), { 'call("hour")': checker });
    check(faker.zen.httpClientError(), { 'zen.httpClientError()': checker });
    check(faker.call("httpClientError"), { 'call("httpClientError")': checker });
    check(faker.zen.httpError(), { 'zen.httpError()': checker });
    check(faker.call("httpError"), { 'call("httpError")': checker });
    check(faker.zen.httpMethod(), { 'zen.httpMethod()': checker });
    check(faker.call("httpMethod"), { 'call("httpMethod")': checker });
    check(faker.zen.httpServerError(), { 'zen.httpServerError()': checker });
    check(faker.call("httpServerError"), { 'call("httpServerError")': checker });
    check(faker.zen.httpStatusCode(), { 'zen.httpStatusCode()': checker });
    check(faker.call("httpStatusCode"), { 'call("httpStatusCode")': checker });
    check(faker.zen.httpStatusCodeSimple(), { 'zen.httpStatusCodeSimple()': checker });
    check(faker.call("httpStatusCodeSimple"), { 'call("httpStatusCodeSimple")': checker });
    check(faker.zen.httpVersion(), { 'zen.httpVersion()': checker });
    check(faker.call("httpVersion"), { 'call("httpVersion")': checker });
    check(faker.zen.imageUrl(500,500), { 'zen.imageUrl(500,500)': checker });
    check(faker.call("imageUrl",500,500), { 'call("imageUrl",500,500)': checker });
    check(faker.zen.indefiniteAdjective(), { 'zen.indefiniteAdjective()': checker });
    check(faker.call("indefiniteAdjective"), { 'call("indefiniteAdjective")': checker });
    check(faker.zen.inputName(), { 'zen.inputName()': checker });
    check(faker.call("inputName"), { 'call("inputName")': checker });
    check(faker.zen.int16(), { 'zen.int16()': checker });
    check(faker.call("int16"), { 'call("int16")': checker });
    check(faker.zen.int32(), { 'zen.int32()': checker });
    check(faker.call("int32"), { 'call("int32")': checker });
    check(faker.zen.int64(), { 'zen.int64()': checker });
    check(faker.call("int64"), { 'call("int64")': checker });
    check(faker.zen.int8(), { 'zen.int8()': checker });
    check(faker.call("int8"), { 'call("int8")': checker });
    check(faker.zen.intRange(3,5), { 'zen.intRange(3,5)': checker });
    check(faker.call("intRange",3,5), { 'call("intRange",3,5)': checker });
    check(faker.zen.interjection(), { 'zen.interjection()': checker });
    check(faker.call("interjection"), { 'call("interjection")': checker });
    check(faker.zen.interrogativeAdjective(), { 'zen.interrogativeAdjective()': checker });
    check(faker.call("interrogativeAdjective"), { 'call("interrogativeAdjective")': checker });
    check(faker.zen.intransitiveVerb(), { 'zen.intransitiveVerb()': checker });
    check(faker.call("intransitiveVerb"), { 'call("intransitiveVerb")': checker });
    check(faker.zen.ipv4Address(), { 'zen.ipv4Address()': checker });
    check(faker.call("ipv4Address"), { 'call("ipv4Address")': checker });
    check(faker.zen.ipv6Address(), { 'zen.ipv6Address()': checker });
    check(faker.call("ipv6Address"), { 'call("ipv6Address")': checker });
    check(faker.zen.isin(), { 'zen.isin()': checker });
    check(faker.call("isin"), { 'call("isin")': checker });
    check(faker.zen.job(), { 'zen.job()': checker });
    check(faker.call("job"), { 'call("job")': checker });
    check(faker.zen.jobDescriptor(), { 'zen.jobDescriptor()': checker });
    check(faker.call("jobDescriptor"), { 'call("jobDescriptor")': checker });
    check(faker.zen.jobLevel(), { 'zen.jobLevel()': checker });
    check(faker.call("jobLevel"), { 'call("jobLevel")': checker });
    check(faker.zen.jobTitle(), { 'zen.jobTitle()': checker });
    check(faker.call("jobTitle"), { 'call("jobTitle")': checker });
    check(faker.zen.language(), { 'zen.language()': checker });
    check(faker.call("language"), { 'call("language")': checker });
    check(faker.zen.languageAbbreviation(), { 'zen.languageAbbreviation()': checker });
    check(faker.call("languageAbbreviation"), { 'call("languageAbbreviation")': checker });
    check(faker.zen.languageBcp(), { 'zen.languageBcp()': checker });
    check(faker.call("languageBcp"), { 'call("languageBcp")': checker });
    check(faker.zen.lastName(), { 'zen.lastName()': checker });
    check(faker.call("lastName"), { 'call("lastName")': checker });
    check(faker.zen.latitude(), { 'zen.latitude()': checker });
    check(faker.call("latitude"), { 'call("latitude")': checker });
    check(faker.zen.latitudeRange(0,90), { 'zen.latitudeRange(0,90)': checker });
    check(faker.call("latitudeRange",0,90), { 'call("latitudeRange",0,90)': checker });
    check(faker.zen.letter(), { 'zen.letter()': checker });
    check(faker.call("letter"), { 'call("letter")': checker });
    check(faker.zen.letterN(3), { 'zen.letterN(3)': checker });
    check(faker.call("letterN",3), { 'call("letterN",3)': checker });
    check(faker.zen.lexify("none"), { 'zen.lexify("none")': checker });
    check(faker.call("lexify","none"), { 'call("lexify","none")': checker });
    check(faker.zen.linkingVerb(), { 'zen.linkingVerb()': checker });
    check(faker.call("linkingVerb"), { 'call("linkingVerb")': checker });
    check(faker.zen.logLevel(), { 'zen.logLevel()': checker });
    check(faker.call("logLevel"), { 'call("logLevel")': checker });
    check(faker.zen.longitude(), { 'zen.longitude()': checker });
    check(faker.call("longitude"), { 'call("longitude")': checker });
    check(faker.zen.longitudeRange(0,180), { 'zen.longitudeRange(0,180)': checker });
    check(faker.call("longitudeRange",0,180), { 'call("longitudeRange",0,180)': checker });
    check(faker.zen.loremIpsumParagraph(2,2,5,"\u003cbr /\u003e"), { 'zen.loremIpsumParagraph(2,2,5,"\u003cbr /\u003e")': checker });
    check(faker.call("loremIpsumParagraph",2,2,5,"\u003cbr /\u003e"), { 'call("loremIpsumParagraph",2,2,5,"\u003cbr /\u003e")': checker });
    check(faker.zen.loremIpsumSentence(5), { 'zen.loremIpsumSentence(5)': checker });
    check(faker.call("loremIpsumSentence",5), { 'call("loremIpsumSentence",5)': checker });
    check(faker.zen.loremIpsumWord(), { 'zen.loremIpsumWord()': checker });
    check(faker.call("loremIpsumWord"), { 'call("loremIpsumWord")': checker });
    check(faker.zen.lunch(), { 'zen.lunch()': checker });
    check(faker.call("lunch"), { 'call("lunch")': checker });
    check(faker.zen.macAddress(), { 'zen.macAddress()': checker });
    check(faker.call("macAddress"), { 'call("macAddress")': checker });
    check(faker.zen.middleName(), { 'zen.middleName()': checker });
    check(faker.call("middleName"), { 'call("middleName")': checker });
    check(faker.zen.minecraftAnimal(), { 'zen.minecraftAnimal()': checker });
    check(faker.call("minecraftAnimal"), { 'call("minecraftAnimal")': checker });
    check(faker.zen.minecraftArmorPart(), { 'zen.minecraftArmorPart()': checker });
    check(faker.call("minecraftArmorPart"), { 'call("minecraftArmorPart")': checker });
    check(faker.zen.minecraftArmorTier(), { 'zen.minecraftArmorTier()': checker });
    check(faker.call("minecraftArmorTier"), { 'call("minecraftArmorTier")': checker });
    check(faker.zen.minecraftBiome(), { 'zen.minecraftBiome()': checker });
    check(faker.call("minecraftBiome"), { 'call("minecraftBiome")': checker });
    check(faker.zen.minecraftDye(), { 'zen.minecraftDye()': checker });
    check(faker.call("minecraftDye"), { 'call("minecraftDye")': checker });
    check(faker.zen.minecraftFood(), { 'zen.minecraftFood()': checker });
    check(faker.call("minecraftFood"), { 'call("minecraftFood")': checker });
    check(faker.zen.minecraftMobBoss(), { 'zen.minecraftMobBoss()': checker });
    check(faker.call("minecraftMobBoss"), { 'call("minecraftMobBoss")': checker });
    check(faker.zen.minecraftMobHostile(), { 'zen.minecraftMobHostile()': checker });
    check(faker.call("minecraftMobHostile"), { 'call("minecraftMobHostile")': checker });
    check(faker.zen.minecraftMobNeutral(), { 'zen.minecraftMobNeutral()': checker });
    check(faker.call("minecraftMobNeutral"), { 'call("minecraftMobNeutral")': checker });
    check(faker.zen.minecraftMobPassive(), { 'zen.minecraftMobPassive()': checker });
    check(faker.call("minecraftMobPassive"), { 'call("minecraftMobPassive")': checker });
    check(faker.zen.minecraftOre(), { 'zen.minecraftOre()': checker });
    check(faker.call("minecraftOre"), { 'call("minecraftOre")': checker });
    check(faker.zen.minecraftTool(), { 'zen.minecraftTool()': checker });
    check(faker.call("minecraftTool"), { 'call("minecraftTool")': checker });
    check(faker.zen.minecraftVillagerJob(), { 'zen.minecraftVillagerJob()': checker });
    check(faker.call("minecraftVillagerJob"), { 'call("minecraftVillagerJob")': checker });
    check(faker.zen.minecraftVillagerLevel(), { 'zen.minecraftVillagerLevel()': checker });
    check(faker.call("minecraftVillagerLevel"), { 'call("minecraftVillagerLevel")': checker });
    check(faker.zen.minecraftVillagerStation(), { 'zen.minecraftVillagerStation()': checker });
    check(faker.call("minecraftVillagerStation"), { 'call("minecraftVillagerStation")': checker });
    check(faker.zen.minecraftWeapon(), { 'zen.minecraftWeapon()': checker });
    check(faker.call("minecraftWeapon"), { 'call("minecraftWeapon")': checker });
    check(faker.zen.minecraftWeather(), { 'zen.minecraftWeather()': checker });
    check(faker.call("minecraftWeather"), { 'call("minecraftWeather")': checker });
    check(faker.zen.minecraftWood(), { 'zen.minecraftWood()': checker });
    check(faker.call("minecraftWood"), { 'call("minecraftWood")': checker });
    check(faker.zen.minute(), { 'zen.minute()': checker });
    check(faker.call("minute"), { 'call("minute")': checker });
    check(faker.zen.month(), { 'zen.month()': checker });
    check(faker.call("month"), { 'call("month")': checker });
    check(faker.zen.monthString(), { 'zen.monthString()': checker });
    check(faker.call("monthString"), { 'call("monthString")': checker });
    check(faker.zen.movie(), { 'zen.movie()': checker });
    check(faker.call("movie"), { 'call("movie")': checker });
    check(faker.zen.movieGenre(), { 'zen.movieGenre()': checker });
    check(faker.call("movieGenre"), { 'call("movieGenre")': checker });
    check(faker.zen.movieName(), { 'zen.movieName()': checker });
    check(faker.call("movieName"), { 'call("movieName")': checker });
    check(faker.zen.name(), { 'zen.name()': checker });
    check(faker.call("name"), { 'call("name")': checker });
    check(faker.zen.namePrefix(), { 'zen.namePrefix()': checker });
    check(faker.call("namePrefix"), { 'call("namePrefix")': checker });
    check(faker.zen.nameSuffix(), { 'zen.nameSuffix()': checker });
    check(faker.call("nameSuffix"), { 'call("nameSuffix")': checker });
    check(faker.zen.nanosecond(), { 'zen.nanosecond()': checker });
    check(faker.call("nanosecond"), { 'call("nanosecond")': checker });
    check(faker.zen.niceColors(), { 'zen.niceColors()': checker });
    check(faker.call("niceColors"), { 'call("niceColors")': checker });
    check(faker.zen.noun(), { 'zen.noun()': checker });
    check(faker.call("noun"), { 'call("noun")': checker });
    check(faker.zen.nounAbstract(), { 'zen.nounAbstract()': checker });
    check(faker.call("nounAbstract"), { 'call("nounAbstract")': checker });
    check(faker.zen.nounCollectiveAnimal(), { 'zen.nounCollectiveAnimal()': checker });
    check(faker.call("nounCollectiveAnimal"), { 'call("nounCollectiveAnimal")': checker });
    check(faker.zen.nounCollectivePeople(), { 'zen.nounCollectivePeople()': checker });
    check(faker.call("nounCollectivePeople"), { 'call("nounCollectivePeople")': checker });
    check(faker.zen.nounCollectiveThing(), { 'zen.nounCollectiveThing()': checker });
    check(faker.call("nounCollectiveThing"), { 'call("nounCollectiveThing")': checker });
    check(faker.zen.nounCommon(), { 'zen.nounCommon()': checker });
    check(faker.call("nounCommon"), { 'call("nounCommon")': checker });
    check(faker.zen.nounConcrete(), { 'zen.nounConcrete()': checker });
    check(faker.call("nounConcrete"), { 'call("nounConcrete")': checker });
    check(faker.zen.nounCountable(), { 'zen.nounCountable()': checker });
    check(faker.call("nounCountable"), { 'call("nounCountable")': checker });
    check(faker.zen.nounDeterminer(), { 'zen.nounDeterminer()': checker });
    check(faker.call("nounDeterminer"), { 'call("nounDeterminer")': checker });
    check(faker.zen.nounPhrase(), { 'zen.nounPhrase()': checker });
    check(faker.call("nounPhrase"), { 'call("nounPhrase")': checker });
    check(faker.zen.nounProper(), { 'zen.nounProper()': checker });
    check(faker.call("nounProper"), { 'call("nounProper")': checker });
    check(faker.zen.nounUncountable(), { 'zen.nounUncountable()': checker });
    check(faker.call("nounUncountable"), { 'call("nounUncountable")': checker });
    check(faker.zen.number(-2147483648,2147483647), { 'zen.number(-2147483648,2147483647)': checker });
    check(faker.call("number",-2147483648,2147483647), { 'call("number",-2147483648,2147483647)': checker });
    check(faker.zen.numerify("none"), { 'zen.numerify("none")': checker });
    check(faker.call("numerify","none"), { 'call("numerify","none")': checker });
    check(faker.zen.operaUserAgent(), { 'zen.operaUserAgent()': checker });
    check(faker.call("operaUserAgent"), { 'call("operaUserAgent")': checker });
    check(faker.zen.paragraph(2,2,5,"\u003cbr /\u003e"), { 'zen.paragraph(2,2,5,"\u003cbr /\u003e")': checker });
    check(faker.call("paragraph",2,2,5,"\u003cbr /\u003e"), { 'call("paragraph",2,2,5,"\u003cbr /\u003e")': checker });
    check(faker.zen.password(true,false,true,true,false,12), { 'zen.password(true,false,true,true,false,12)': checker });
    check(faker.call("password",true,false,true,true,false,12), { 'call("password",true,false,true,true,false,12)': checker });
    check(faker.zen.pastTime(), { 'zen.pastTime()': checker });
    check(faker.call("pastTime"), { 'call("pastTime")': checker });
    check(faker.zen.person(), { 'zen.person()': checker });
    check(faker.call("person"), { 'call("person")': checker });
    check(faker.zen.petName(), { 'zen.petName()': checker });
    check(faker.call("petName"), { 'call("petName")': checker });
    check(faker.zen.phone(), { 'zen.phone()': checker });
    check(faker.call("phone"), { 'call("phone")': checker });
    check(faker.zen.phoneFormatted(), { 'zen.phoneFormatted()': checker });
    check(faker.call("phoneFormatted"), { 'call("phoneFormatted")': checker });
    check(faker.zen.phrase(), { 'zen.phrase()': checker });
    check(faker.call("phrase"), { 'call("phrase")': checker });
    check(faker.zen.possessiveAdjective(), { 'zen.possessiveAdjective()': checker });
    check(faker.call("possessiveAdjective"), { 'call("possessiveAdjective")': checker });
    check(faker.zen.preposition(), { 'zen.preposition()': checker });
    check(faker.call("preposition"), { 'call("preposition")': checker });
    check(faker.zen.prepositionCompound(), { 'zen.prepositionCompound()': checker });
    check(faker.call("prepositionCompound"), { 'call("prepositionCompound")': checker });
    check(faker.zen.prepositionDouble(), { 'zen.prepositionDouble()': checker });
    check(faker.call("prepositionDouble"), { 'call("prepositionDouble")': checker });
    check(faker.zen.prepositionPhrase(), { 'zen.prepositionPhrase()': checker });
    check(faker.call("prepositionPhrase"), { 'call("prepositionPhrase")': checker });
    check(faker.zen.prepositionSimple(), { 'zen.prepositionSimple()': checker });
    check(faker.call("prepositionSimple"), { 'call("prepositionSimple")': checker });
    check(faker.zen.price(0,1000), { 'zen.price(0,1000)': checker });
    check(faker.call("price",0,1000), { 'call("price",0,1000)': checker });
    check(faker.zen.product(), { 'zen.product()': checker });
    check(faker.call("product"), { 'call("product")': checker });
    check(faker.zen.productCategory(), { 'zen.productCategory()': checker });
    check(faker.call("productCategory"), { 'call("productCategory")': checker });
    check(faker.zen.productDescription(), { 'zen.productDescription()': checker });
    check(faker.call("productDescription"), { 'call("productDescription")': checker });
    check(faker.zen.productFeature(), { 'zen.productFeature()': checker });
    check(faker.call("productFeature"), { 'call("productFeature")': checker });
    check(faker.zen.productMaterial(), { 'zen.productMaterial()': checker });
    check(faker.call("productMaterial"), { 'call("productMaterial")': checker });
    check(faker.zen.productName(), { 'zen.productName()': checker });
    check(faker.call("productName"), { 'call("productName")': checker });
    check(faker.zen.productUpc(), { 'zen.productUpc()': checker });
    check(faker.call("productUpc"), { 'call("productUpc")': checker });
    check(faker.zen.programmingLanguage(), { 'zen.programmingLanguage()': checker });
    check(faker.call("programmingLanguage"), { 'call("programmingLanguage")': checker });
    check(faker.zen.pronoun(), { 'zen.pronoun()': checker });
    check(faker.call("pronoun"), { 'call("pronoun")': checker });
    check(faker.zen.pronounDemonstrative(), { 'zen.pronounDemonstrative()': checker });
    check(faker.call("pronounDemonstrative"), { 'call("pronounDemonstrative")': checker });
    check(faker.zen.pronounIndefinite(), { 'zen.pronounIndefinite()': checker });
    check(faker.call("pronounIndefinite"), { 'call("pronounIndefinite")': checker });
    check(faker.zen.pronounInterrogative(), { 'zen.pronounInterrogative()': checker });
    check(faker.call("pronounInterrogative"), { 'call("pronounInterrogative")': checker });
    check(faker.zen.pronounObject(), { 'zen.pronounObject()': checker });
    check(faker.call("pronounObject"), { 'call("pronounObject")': checker });
    check(faker.zen.pronounPersonal(), { 'zen.pronounPersonal()': checker });
    check(faker.call("pronounPersonal"), { 'call("pronounPersonal")': checker });
    check(faker.zen.pronounPossessive(), { 'zen.pronounPossessive()': checker });
    check(faker.call("pronounPossessive"), { 'call("pronounPossessive")': checker });
    check(faker.zen.pronounReflective(), { 'zen.pronounReflective()': checker });
    check(faker.call("pronounReflective"), { 'call("pronounReflective")': checker });
    check(faker.zen.pronounRelative(), { 'zen.pronounRelative()': checker });
    check(faker.call("pronounRelative"), { 'call("pronounRelative")': checker });
    check(faker.zen.properAdjective(), { 'zen.properAdjective()': checker });
    check(faker.call("properAdjective"), { 'call("properAdjective")': checker });
    check(faker.zen.quantitativeAdjective(), { 'zen.quantitativeAdjective()': checker });
    check(faker.call("quantitativeAdjective"), { 'call("quantitativeAdjective")': checker });
    check(faker.zen.question(), { 'zen.question()': checker });
    check(faker.call("question"), { 'call("question")': checker });
    check(faker.zen.quote(), { 'zen.quote()': checker });
    check(faker.call("quote"), { 'call("quote")': checker });
    check(faker.zen.randomInt([14,8,13]), { 'zen.randomInt([14,8,13])': checker });
    check(faker.call("randomInt",[14,8,13]), { 'call("randomInt",[14,8,13])': checker });
    check(faker.zen.randomString(["none","how","these","keep","trip","congolese","choir","computer","still","far"]), { 'zen.randomString(["none","how","these","keep","trip","congolese","choir","computer","still","far"])': checker });
    check(faker.call("randomString",["none","how","these","keep","trip","congolese","choir","computer","still","far"]), { 'call("randomString",["none","how","these","keep","trip","congolese","choir","computer","still","far"])': checker });
    check(faker.zen.randomUint([14,8,13]), { 'zen.randomUint([14,8,13])': checker });
    check(faker.call("randomUint",[14,8,13]), { 'call("randomUint",[14,8,13])': checker });
    check(faker.zen.rgbColor(), { 'zen.rgbColor()': checker });
    check(faker.call("rgbColor"), { 'call("rgbColor")': checker });
    check(faker.zen.runtimeError(), { 'zen.runtimeError()': checker });
    check(faker.call("runtimeError"), { 'call("runtimeError")': checker });
    check(faker.zen.safariUserAgent(), { 'zen.safariUserAgent()': checker });
    check(faker.call("safariUserAgent"), { 'call("safariUserAgent")': checker });
    check(faker.zen.safeColor(), { 'zen.safeColor()': checker });
    check(faker.call("safeColor"), { 'call("safeColor")': checker });
    check(faker.zen.school(), { 'zen.school()': checker });
    check(faker.call("school"), { 'call("school")': checker });
    check(faker.zen.second(), { 'zen.second()': checker });
    check(faker.call("second"), { 'call("second")': checker });
    check(faker.zen.sentence(5), { 'zen.sentence(5)': checker });
    check(faker.call("sentence",5), { 'call("sentence",5)': checker });
    check(faker.zen.shuffleInts([14,8,13]), { 'zen.shuffleInts([14,8,13])': checker });
    check(faker.call("shuffleInts",[14,8,13]), { 'call("shuffleInts",[14,8,13])': checker });
    check(faker.zen.shuffleStrings(["none","how","these","keep","trip","congolese","choir","computer","still","far"]), { 'zen.shuffleStrings(["none","how","these","keep","trip","congolese","choir","computer","still","far"])': checker });
    check(faker.call("shuffleStrings",["none","how","these","keep","trip","congolese","choir","computer","still","far"]), { 'call("shuffleStrings",["none","how","these","keep","trip","congolese","choir","computer","still","far"])': checker });
    check(faker.zen.simpleSentence(), { 'zen.simpleSentence()': checker });
    check(faker.call("simpleSentence"), { 'call("simpleSentence")': checker });
    check(faker.zen.slogan(), { 'zen.slogan()': checker });
    check(faker.call("slogan"), { 'call("slogan")': checker });
    check(faker.zen.snack(), { 'zen.snack()': checker });
    check(faker.call("snack"), { 'call("snack")': checker });
    check(faker.zen.ssn(), { 'zen.ssn()': checker });
    check(faker.call("ssn"), { 'call("ssn")': checker });
    check(faker.zen.state(), { 'zen.state()': checker });
    check(faker.call("state"), { 'call("state")': checker });
    check(faker.zen.stateAbbreviation(), { 'zen.stateAbbreviation()': checker });
    check(faker.call("stateAbbreviation"), { 'call("stateAbbreviation")': checker });
    check(faker.zen.street(), { 'zen.street()': checker });
    check(faker.call("street"), { 'call("street")': checker });
    check(faker.zen.streetName(), { 'zen.streetName()': checker });
    check(faker.call("streetName"), { 'call("streetName")': checker });
    check(faker.zen.streetNumber(), { 'zen.streetNumber()': checker });
    check(faker.call("streetNumber"), { 'call("streetNumber")': checker });
    check(faker.zen.streetPrefix(), { 'zen.streetPrefix()': checker });
    check(faker.call("streetPrefix"), { 'call("streetPrefix")': checker });
    check(faker.zen.streetSuffix(), { 'zen.streetSuffix()': checker });
    check(faker.call("streetSuffix"), { 'call("streetSuffix")': checker });
    check(faker.zen.teams(["none","how","these","keep","trip","congolese","choir","computer","still","far"],["unless","army","party","riches","theirs","instead","here","mine","whichever","that"]), { 'zen.teams(["none","how","these","keep","trip","congolese","choir","computer","still","far"],["unless","army","party","riches","theirs","instead","here","mine","whichever","that"])': checker });
    check(faker.call("teams",["none","how","these","keep","trip","congolese","choir","computer","still","far"],["unless","army","party","riches","theirs","instead","here","mine","whichever","that"]), { 'call("teams",["none","how","these","keep","trip","congolese","choir","computer","still","far"],["unless","army","party","riches","theirs","instead","here","mine","whichever","that"])': checker });
    check(faker.zen.timezone(), { 'zen.timezone()': checker });
    check(faker.call("timezone"), { 'call("timezone")': checker });
    check(faker.zen.timezoneAbbreviation(), { 'zen.timezoneAbbreviation()': checker });
    check(faker.call("timezoneAbbreviation"), { 'call("timezoneAbbreviation")': checker });
    check(faker.zen.timezoneFull(), { 'zen.timezoneFull()': checker });
    check(faker.call("timezoneFull"), { 'call("timezoneFull")': checker });
    check(faker.zen.timezoneOffset(), { 'zen.timezoneOffset()': checker });
    check(faker.call("timezoneOffset"), { 'call("timezoneOffset")': checker });
    check(faker.zen.timezoneRegion(), { 'zen.timezoneRegion()': checker });
    check(faker.call("timezoneRegion"), { 'call("timezoneRegion")': checker });
    check(faker.zen.transitiveVerb(), { 'zen.transitiveVerb()': checker });
    check(faker.call("transitiveVerb"), { 'call("transitiveVerb")': checker });
    check(faker.zen.uint16(), { 'zen.uint16()': checker });
    check(faker.call("uint16"), { 'call("uint16")': checker });
    check(faker.zen.uint32(), { 'zen.uint32()': checker });
    check(faker.call("uint32"), { 'call("uint32")': checker });
    check(faker.zen.uint64(), { 'zen.uint64()': checker });
    check(faker.call("uint64"), { 'call("uint64")': checker });
    check(faker.zen.uint8(), { 'zen.uint8()': checker });
    check(faker.call("uint8"), { 'call("uint8")': checker });
    check(faker.zen.uintRange(0,4294967295), { 'zen.uintRange(0,4294967295)': checker });
    check(faker.call("uintRange",0,4294967295), { 'call("uintRange",0,4294967295)': checker });
    check(faker.zen.url(), { 'zen.url()': checker });
    check(faker.call("url"), { 'call("url")': checker });
    check(faker.zen.userAgent(), { 'zen.userAgent()': checker });
    check(faker.call("userAgent"), { 'call("userAgent")': checker });
    check(faker.zen.username(), { 'zen.username()': checker });
    check(faker.call("username"), { 'call("username")': checker });
    check(faker.zen.uuid(), { 'zen.uuid()': checker });
    check(faker.call("uuid"), { 'call("uuid")': checker });
    check(faker.zen.validationError(), { 'zen.validationError()': checker });
    check(faker.call("validationError"), { 'call("validationError")': checker });
    check(faker.zen.vegetable(), { 'zen.vegetable()': checker });
    check(faker.call("vegetable"), { 'call("vegetable")': checker });
    check(faker.zen.verb(), { 'zen.verb()': checker });
    check(faker.call("verb"), { 'call("verb")': checker });
    check(faker.zen.verbPhrase(), { 'zen.verbPhrase()': checker });
    check(faker.call("verbPhrase"), { 'call("verbPhrase")': checker });
    check(faker.zen.weekday(), { 'zen.weekday()': checker });
    check(faker.call("weekday"), { 'call("weekday")': checker });
    check(faker.zen.word(), { 'zen.word()': checker });
    check(faker.call("word"), { 'call("word")': checker });
    check(faker.zen.year(), { 'zen.year()': checker });
    check(faker.call("year"), { 'call("year")': checker });
    check(faker.zen.zip(), { 'zen.zip()': checker });
    check(faker.call("zip"), { 'call("zip")': checker });
  });
};
